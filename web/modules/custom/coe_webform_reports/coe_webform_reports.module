<?php

/**
 * @file
 * Primary module hooks for coe_webform_reports module.
 *
 */

use Drupal\Component\Serialization\Yaml;
use Drupal\views\ViewExecutable;
use Drupal\webform\WebformInterface;
use Drupal\webform\WebformSubmissionInterface;
use Google\Analytics\Data\V1beta\Filter;
use Google\Analytics\Data\V1beta\Filter\InListFilter;
use Google\Analytics\Data\V1beta\Filter\StringFilter;
use Google\Analytics\Data\V1beta\Filter\StringFilter\MatchType;
use Google\Analytics\Data\V1beta\FilterExpression;
use Google\Analytics\Data\V1beta\FilterExpressionList;
use Google\Client;
use Google\Analytics\Data\V1beta\DateRange;
use Google\Analytics\Data\V1beta\Dimension;
use Google\Analytics\Data\V1beta\Metric;
use Google\Analytics\Data\V1beta\BetaAnalyticsDataClient;

/**
 * Batch process callback to process each webform.
 */
function coe_webform_reports_process_webform_install_batch($webform, &$context) {
  coe_webform_pdf_add_completion_time_field($webform);
  coe_webform_pdf_add_google_sheets_url_field($webform);
}

/**
 * Batch process callback to run after processing all webforms.
 */
function coe_webform_reports_batch_finished($success, $results, $operations) {
  if ($success) {
    // The batch process was successful.
    \Drupal::messenger()->addMessage(t('Webform processing completed successfully.'));
  }
  else {
    // The batch process encountered an error.
    \Drupal::messenger()->addError(t('Webform processing encountered an error.'));
  }
}

/**
 * Implements hook_form_alter().
 */
function coe_webform_reports_form_alter(&$form, &$form_state, $form_id) {

//  _api_test();

  // Note: Could not do this in submit handler due to AJAX nor in hook_entity_insert().
  // Adds completion_time and google_sheets_url field to webform entity if it doesn't exist yet.
  $form_ids = [
    'webform_source_form',
    'webform_edit_form',
  ];
  if (in_array($form_id, $form_ids)) {
    $webform = $form_state->getFormObject()->getEntity();
    coe_webform_pdf_add_completion_time_field($webform);
    coe_webform_pdf_add_google_sheets_url_field($webform);
  }

//  // is a webform submission add form
//  if (strpos($form_id, 'webform_submission') !== false
//    && strpos($form_id, 'add_form') !== false) {
//    // hide the Google Sheets URL field
//    $form['elements']['google_sheets_url']['#access'] = FALSE;
//  }

}

/**
 * Implements hook_webform_insert().
 */
function coe_webform_reports_webform_insert(WebformInterface $webform) {
  $view_count_service = \Drupal::service('coe_webform_reports.view_count');
  $view_count_service->onWebformCreate($webform);
}

/**
 * Implements hook_webform_delete().
 */
function coe_webform_reports_webform_delete(WebformInterface $webform) {
  $view_count_service = \Drupal::service('coe_webform_reports.view_count');
  $view_count_service->onWebformDelete($webform);
}

function _api_test() {
//  ksm($analytics);
  // Call the Analytics Reporting API V4.
  $response = _getReport();
  ksm($response);

//  $propertyId = 'your-property-id'; // Replace with your GA4 property ID.
//  $dateRange = new Google_Service_AnalyticsData_DateRange();
//  $dateRange->setStartDate('YYYY-MM-DD'); // Specify the date range.
//  $dateRange->setEndDate('YYYY-MM-DD');
//
//  $request = new Google_Service_AnalyticsData_RunReportRequest();
//  $request->setDateRanges($dateRange);
//  $request->setMetrics([['name' => 'metrics/goalCompletionsAll']]); // Replace with the actual metric you want.
//
//  $response = $analytics->properties->runReport($propertyId, $request);
//
//  // Process the $response JSON to extract the data you need.
}


///**
// * Queries the Analytics Reporting API V4.
// *
// * @param service An authorized Analytics Reporting API V4 service object.
// * @return The Analytics Reporting API V4 response.
// */
function _getReport() {

  $google_api_service_client = \Drupal::entityTypeManager()->getStorage('google_api_service_client')->load('ga4');
  $googleService = \Drupal::service('google_api_service_client.client');
  // Set the account.
  $googleService->setGoogleApiClient($google_api_service_client);
  $creds = $googleService->googleApiServiceClient->getAuthConfig();

  // Replace with your view ID, for example XXXX.
  $propertyId = "413264721";

  $client = new BetaAnalyticsDataClient(['credentials' => $creds]);

  // Create the GA4 property ID.
  $property = "properties/$propertyId";

  $dateRange = new DateRange();
  $dateRange->setStartDate('2023-10-01');
  $dateRange->setEndDate('today');

  $dimensions = [new Dimension(['name' => 'contentId'])];
  $metrics = [new Metric(['name' => 'eventCount'])];

  // Set the specific contentId you want to filter by.
  $specificContentId = 'webform-submission-contact-add-form';

//  // Will return the sum of those two
//  $dimensionFilter = new FilterExpression([
//    'filter' => new Filter([
//      'field_name' => 'contentId',
//      'in_list_filter' => new inListFilter([
//        'values' => ['webform-submission-contact-add-form', 'webform-submission-test-add-form']
//      ])
//    ])
//  ]);

  $dimensionFilter = new FilterExpression([
    'filter' => new Filter([
      'field_name' => 'contentId',
      'string_filter' => new stringFilter([
        'value' => 'webform-submission-contact-add-form'
      ])
    ])
  ]);

  $response = $client->runReport([
    'property' => 'properties/' . $propertyId,
    'dateRanges' => [$dateRange],
//    'dimensions' => $dimensions,
    'metrics' => $metrics,
    'dimensionFilter' => $dimensionFilter,
  ]);

  if ($response) {
    foreach ($response->getRows() as $row) {
      $count = $row->getMetricValues()[0]->getValue();
    }
    $client->close();
    return $count;
  }

}

/**
 * Adds a submission_pdf field to the webform if it doesn't exist already.
 *
 * @return void
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function coe_webform_pdf_add_completion_time_field(WebformInterface $webform) {
  $webform_elements = $webform->get('elements');
  if (!empty($webform_elements)) {
    $no_field_added_yet = strpos($webform_elements, "completion_time") === false;
    if (!empty($webform_elements) && $no_field_added_yet) {
      $elements = Yaml::decode($webform_elements);
      // add the field
      $elements['completion_time'] = [
        '#type' => 'textfield',
        '#title' => 'Completion Time',
      ];
      $webform->set('elements', Yaml::encode($elements));
      $webform->save();
    }
  }
}

/**
 * Adds a submission_pdf field to the webform if it doesn't exist already.
 *
 * @return void
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function coe_webform_pdf_add_google_sheets_url_field(WebformInterface $webform) {
  $webform_elements = $webform->get('elements');
  if (!empty($webform_elements)) {
    $no_field_added_yet = strpos($webform_elements, "google_sheets_url") === false;
    if (!empty($webform_elements) && $no_field_added_yet) {
      $elements = Yaml::decode($webform_elements);
      // add the field
      $elements['google_sheets_url'] = [
        '#type' => 'webform_link',
        '#title' => 'Google Sheets URL',
        '#title__access' => false,
      ];
      $webform->set('elements', Yaml::encode($elements));
      $webform->save();
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for webform templates.
 */
function coe_webform_reports_theme_suggestions_webform_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'webform__reports_template';
}

/**
 * Implements hook_theme().
 */
function coe_webform_reports_theme($existing, $type, $theme, $path) {
  return [
    'webform__reports_template' => [
      'render element' => 'element',
      'base hook' => 'webform',
      'variables' => [
        'webform_id' => null
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function coe_webform_reports_preprocess_webform__reports_template(&$variables) {
  $webform_id = $variables['element']['#webform_id'];
  $variables['webform_id'] = $webform_id;
}

function coe_webform_reports_views_pre_render(ViewExecutable $view) {
//  ksm($view);
}
