<?php

/**
 * @file
 * Primary module hooks for coe_webform_reports module.
 *
 */

use Drupal\Component\Serialization\Yaml;
use Drupal\webform\WebformInterface;
use Drupal\webform\WebformSubmissionInterface;
use Google\Analytics\Data\V1beta\Filter;
use Google\Analytics\Data\V1beta\Filter\InListFilter;
use Google\Analytics\Data\V1beta\Filter\StringFilter;
use Google\Analytics\Data\V1beta\Filter\StringFilter\MatchType;
use Google\Analytics\Data\V1beta\FilterExpression;
use Google\Analytics\Data\V1beta\FilterExpressionList;
use Google\Client;
use Google\Analytics\Data\V1beta\DateRange;
use Google\Analytics\Data\V1beta\Dimension;
use Google\Analytics\Data\V1beta\Metric;
use Google\Analytics\Data\V1beta\BetaAnalyticsDataClient;

/**
 * Implements hook_form_alter().
 */
function coe_webform_reports_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'webform_edit_form') {
    $webform = $form_state->getFormObject()->getEntity();;
    // Need to move this to a service method
    /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
    $queue_factory = \Drupal::service('queue');
    /** @var \Drupal\Core\Queue\QueueInterface $queue */
    $queue = $queue_factory->get('coe_webform_reports_view_count');
    //Add to the queue.
    $item = new \stdClass();
    $item->id = $webform->id();
    $item->path = $webform->url();
    $queue->createItem($item);
  }

  // Note: Could not do this in submit handler due to AJAX nor in hook_entity_insert().
  // Add completion_time field to webform entity if it doesn't exist yet.
  // This field will keep track of how long the user took to fill out the form.
  $form_ids = [
    'webform_source_form',
    'webform_edit_form',
  ];
  if (in_array($form_id, $form_ids)) {
    $webform = $form_state->getFormObject()->getEntity();
    coe_webform_pdf_add_completion_time_field($webform);
  }

  $current_route = \Drupal::routeMatch()->getRouteName();
  // Is a webform
  if (!empty($form['#webform_id']) && $current_route === 'entity.webform.canonical') {
    $form['#attached']['library'][] = 'coe_webform_reports/time-tracker';
  }

}

/**
 * Implements hook_webform_insert().
 */
function coe_webform_reports_webform_insert(WebformInterface $webform) {
  $view_count_service = \Drupal::service('coe_webform_reports.view_count');
  $view_count_service->onWebformCreate($webform);
}

/**
 * Implements hook_webform_delete().
 */
function coe_webform_reports_webform_delete(WebformInterface $webform) {
  $view_count_service = \Drupal::service('coe_webform_reports.view_count');
  $view_count_service->onWebformDelete($webform);
}

function _api_test() {
  $client = new Client();
  $client->setAuthConfig('modules/custom/coe_webform_reports/client_secret_174960103407-2mudtsjrljrevic47j12b3rl52g1dhck.apps.googleusercontent.com.json');
  $client->addScope('https://www.googleapis.com/auth/analytics.readonly');

  // Set up the API client and authenticate.
  // Create an authorized analytics service object.
  $analytics = new Google_Service_AnalyticsData($client);
//  ksm($analytics);
  // Call the Analytics Reporting API V4.
  $response = _getReport($analytics);

//  $propertyId = 'your-property-id'; // Replace with your GA4 property ID.
//  $dateRange = new Google_Service_AnalyticsData_DateRange();
//  $dateRange->setStartDate('YYYY-MM-DD'); // Specify the date range.
//  $dateRange->setEndDate('YYYY-MM-DD');
//
//  $request = new Google_Service_AnalyticsData_RunReportRequest();
//  $request->setDateRanges($dateRange);
//  $request->setMetrics([['name' => 'metrics/goalCompletionsAll']]); // Replace with the actual metric you want.
//
//  $response = $analytics->properties->runReport($propertyId, $request);
//
//  // Process the $response JSON to extract the data you need.
}


///**
// * Queries the Analytics Reporting API V4.
// *
// * @param service An authorized Analytics Reporting API V4 service object.
// * @return The Analytics Reporting API V4 response.
// */
function _getReport($analytics) {

//  $google_api_service_client = \Drupal::entityTypeManager()->getStorage('google_api_service_client')->load('ga4');
//  $googleService = \Drupal::service('google_api_service_client.client');
//  // Set the account.
//  $googleService->setGoogleApiClient($google_api_service_client);
//  $creds = $googleService->googleApiServiceClient->getAuthConfig();
//
//  // Replace with your view ID, for example XXXX.
//  $propertyId = "413264721";
//
//  $client = new BetaAnalyticsDataClient(['credentials' => $creds]);
//
//  // Create the GA4 property ID.
//  $property = "properties/$propertyId";
//
//  $dateRange = new DateRange();
//  $dateRange->setStartDate('2023-10-01');
//  $dateRange->setEndDate('today');
//
//  $dimensions = [new Dimension(['name' => 'contentId'])];
//  $metrics = [new Metric(['name' => 'screenPageViews'])];
//
//  // Set the specific contentId you want to filter by.
//  $specificContentId = 'webform-submission-contact-add-form';
//
//  // Will return the sum of those two
//  $dimensionFilter = new FilterExpression([
//    'filter' => new Filter([
//      'field_name' => 'pagePath',
//      'in_list_filter' => new inListFilter([
//        'values' => ['/form/test', '/form/contact']
//      ])
//    ])
//  ]);
//  ;
//
//  $response = $client->runReport([
//    'property' => 'properties/' . $propertyId,
//    'dateRanges' => [$dateRange],
////    'dimensions' => $dimensions,
//    'metrics' => $metrics,
//    'dimensionFilter' => $dimensionFilter,
//  ]);
//
//  if ($response) {
//    foreach ($response->getRows() as $row) {
//      $count = $row->getMetricValues()[0]->getValue();
//    }
//    $client->close();
//    return $count;
//  }

}

/**
 * Adds a submission_pdf field to the webform if it doesn't exist already.
 *
 * @return void
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function coe_webform_pdf_add_completion_time_field(WebformInterface $webform) {
  $webform_elements = $webform->get('elements');
  $no_field_added_yet = strpos($webform_elements, "completion_time") === false;
  if (!empty($webform_elements) && $no_field_added_yet) {
    $elements = Yaml::decode($webform_elements);
    // add the field
    $elements['completion_time'] = [
      '#type' => 'textfield',
      '#title' => 'Completion Time',
    ];
    $webform->set('elements', Yaml::encode($elements));
    $webform->save();
  }
}
